#!/bin/python

import os
import shutil
import sys
import subprocess
import hashlib
from typing import TextIO, List
from datetime import datetime
import xml.etree.ElementTree as ET
from dataclasses import dataclass

# Make into an optional dependency?
import validators

# TODO

# - [ ] Convert self.error to native Raise calls?
# - [x] ❗ make most classes into a dataclasses, using the @dataclass decorator
#   - https://docs.python.org/3/library/dataclasses.html
#   - for docstrings, see https://stackoverflow.com/questions/51125415/how-do-i-document-a-constructor-for-a-class-using-python-dataclasses
#     - may be nice if some doc info from the .xsd would be visible in docstring
# - [x] vraag Leon naar verschillende IDs bij Bestand & Informatieobject
# - [x] python library rfc3987: may seem useful, but too permissive
# - [ ] Nederlandse (+engelse?) documentatie, en het script in het Engels
#   - make a nice ascii cast!
# - [x] URL validation
# - [ ] try siegfried instead of fido for speed?
#   - https://openpreservation.org/blogs/siegfried-pronom-based-file-format-identification-tool/
#   - also, fido lacks behind the pronom spec; .wacz are not recognized for example
# - [x] check length of naam
# - [x] make sure to allow multiple values when "unbounded"
# - [ ] fish/bash autocomplete
#   - i think the best approach is supply these as files on git
#   - this might be useful https://github.com/kislyuk/argcomplete
# - [ ] make a informatieobject subclass, and Object parent class
#   - This way, the script becomes more useful, as it can also generate other .xml files
# - [ ] write unit tests
# - [ ] write setup.py script

MAX_NAAM_LENGTH = 80


@dataclass
class IdentificatieGegevens:
    """MDTO identificatieGegevens class

    MDTO docs: 
        https://www.nationaalarchief.nl/archiveren/mdto/identificatieGegevens

    Args:
        identificatieKenmerk (str): Een kenmerk waarmee een object geïdentificeerd kan worden
        identificatieBron (str): Herkomst van het kenmerk
    """

    identificatieKenmerk: str
    identificatieBron: str

    def to_xml(self, root: str) -> ET.Element:
        """Transform IdentificatieGegevens into XML tree

        Args:
            root (str): name of the new root tag

        Returns:
            ET.Element: XML representation of IdentificatieGegevens with new root tag
        """

        root = ET.Element(root)

        kenmerk = ET.SubElement(root, "identificatieKenmerk")
        kenmerk.text = self.identificatieKenmerk

        bron = ET.SubElement(root, "identificatieBron")
        bron.text = self.identificatieBron

        return root


@dataclass
class VerwijzingGegevens:
    """MDTO verwijzingGegevens class

    MDTO docs: https://www.nationaalarchief.nl/archiveren/mdto/verwijzingGegevens

    Args:
        verwijzingNaam (str): De naam van het object waarnaar verwezen wordt
        verwijzingIdentificatie (IdentificatieGegevens, optional): De identificatie van het object waarnaar verwezen wordt
    """

    verwijzingNaam: str
    verwijzingIdentificatie: IdentificatieGegevens = None

    def to_xml(self, root: str) -> ET.Element:
        """Transform VerwijzingGegevens into XML tree

        Args:
            root (str): name of the new root tag

        Returns:
            ET.Element: XML representation of VerwijzingGegevens with new root tag
        """

        root = ET.Element(root)

        verwijzingnaam = ET.SubElement(root, "verwijzingNaam")
        verwijzingnaam.text = self.verwijzingNaam

        if self.verwijzingIdentificatie:
            # append lxml element directly to tree,
            # and set name of the root element to 'verwijzingIdentificatie'
            root.append(
                self.verwijzingIdentificatie.to_xml("verwijzingIdentificatie"))

        return root


@dataclass
class BegripGegevens:
    """MDTO begripGegevens class

    MDTO docs: https://www.nationaalarchief.nl/archiveren/mdto/begripGegevens

    Args:
        begripLabel (str): De tekstweergave van het begrip dat is toegekend in de begrippenlijst
        begripBegrippenlijst (VerwijzingGegevens): Verwijzing naar een beschrijving van de begrippen
        begripCode (str, optional): De code die aan het begrip is toegekend in de begrippenlijst
    """

    begripLabel: str
    begripBegrippenlijst: VerwijzingGegevens
    begripCode: str = None

    def to_xml(self, root: str) -> ET.Element:
        """Transform BegripGegevens into XML tree

        Args:
            root (str): name of the new root tag

        Returns:
            ET.Element: XML representation of BegripGegevens with new root tag
        """

        root = ET.Element(root)

        begriplabel = ET.SubElement(root, "begripLabel")
        begriplabel.text = self.begripLabel

        if self.begripCode:
            begripcode = ET.SubElement(root, "begripCode")
            begripcode.text = self.begripCode

        root.append(self.begripBegrippenlijst.to_xml("begripBegrippenlijst"))

        return root


class ChecksumGegevens:
    """MDTO checksumGegevens class

    MDTO docs: https://www.nationaalarchief.nl/archiveren/mdto/checksumGegevens
    """

    def __init__(self, infile: TextIO, algorithm: str = "sha256"):
        """Create a new checksumGegevens object.
        Values for `checksumAlgoritme`, `checksumWaarde`, and `checksumDatum` are generated automatically.

        Args:
            infile (TextIO): file-like object to generate checksum data for
            algorithm (str, optional): checksum algorithm to use; defaults to sha256. For valid values, see https://docs.python.org/3/library/hashlib.html
        """

        verwijzing = VerwijzingGegevens(
            verwijzingNaam='Begrippenlijst ChecksumAlgoritme MDTO')

        self.checksumAlgoritme = BegripGegevens(
            begripLabel=algorithm.upper().replace("SHA", "SHA-"),
            begripBegrippenlijst=verwijzing)

        # file_digest() expects a file in binary mode, hence `infile.buffer.raw`
        # FIXME: this value is not the same on each call?
        self.checksumWaarde = hashlib.file_digest(
            infile.buffer.raw, algorithm
        ).hexdigest()

        self.checksumDatum = datetime.now().strftime("%Y-%m-%dT%H:%M:%S")

    def to_xml(self) -> ET.Element:
        """Transform Bestand into XML tree with the following structure:

         ```xml
         <checksum>
             <checksumAlgoritme>
                 …
             </checksumAlgoritme>
             <checksumWaarde>…</checksumWaarde>
             <checksumDatum>…</checksumDatum>
         </checksum>
         ```

        Returns:
             ET.Element: XML representation of object
        """

        root = ET.Element("checksum")

        root.append(self.checksumAlgoritme.to_xml("checksumAlgoritme"))

        checksumWaarde = ET.SubElement(root, "checksumWaarde")
        checksumWaarde.text = self.checksumWaarde

        checksumDatum = ET.SubElement(root, "checksumDatum")
        checksumDatum.text = self.checksumDatum

        return root


class Bestand:
    """MDTO Bestand class"""

    def __init__(
        self,
        infile: TextIO | str,
        identificatiekenmerken: List[str] | str,
        identificatiebronnen: List[str] | str,
        informatieobject: TextIO = None,
        isrepresentatievan: VerwijzingGegevens = None,
        naam: str = None,
        url: str = None,
        quiet: bool = False,
        force: bool = False,
    ):
        """Create a new Bestand object.

        Callers should provide either `informatieobject` or `isrepresentatievan`.
        When using `informatieobject`, the correct values for <isRepresentatieVan> are
        infered by parsing the XML of the given file.

        Callers may provide a list of strings to `identificatiekenmerken` and `identificatiebronnen`
        in case multiple <identificatie> tags are desired. Otherwise, a single str suffices.

        Args:
            infile (TextIO | str): file name or file-like object serves as the input file
            identificatiekenmerken (List[str] | str): str or list of str for <identificatieKenmerk> tags
            identificatiebronnen (List[str] | str): str or list of str for <identificatieBron> tags
            informatieobject (TextIO, optional): file name or file-like object which
                represents an MDTO InformatieObject in XML form.
                Used to infer values for <isRepresentatieVan>.
            isrepresentatievan (VerwijzingGegevens, optional): directly specify values for <isRepresentatieVan>
            naam (str, optional): value of <naam>. Defaults to the basename of `infile`
            url (str, optional): value of <URLBestand>
            quiet (bool, optional): silence non-fatal warnings
            force (bool, optional): do not exit when encountering invalid tag values

        Example:
            ```python

            # (Option #1) Using a VerwijzingGegevens object:
            verwijzing = VerwijzingGegevens('Verlenen kapvergunning Hooigracht 21 Den Haag')
            with open('19880405KapvergunningHoogracht.pdf') as f:
                bestand = Bestand(f, '34c5-4379-9f1a-5c37872e316d', 'Proza (OCW-DMS)',
                                  isrepresentatievan=verwijzing)

            # (Option #2) Using a pre-existing XML file that represents an InformatieObject:
            with open('informatieobject_001.xml') as f:
                bestand = Bestand("vergunning.pdf", '34c5-4379-9f1a-5c37872e316d', 'Proza (OCW-DMS)',
                                  informatieobject=f)
            ```
        """

        if quiet:
            self.log = lambda m: None
        else:
            self.log = lambda m: print(m, file=sys.stderr)

        self.force = force

        # allow infile to be a path (str)
        infile = self._process_file(infile)

        # permit setting kenmerk and bron to a string
        if isinstance(identificatiekenmerken, str):
            identificatiekenmerken = [identificatiekenmerken]
        if isinstance(identificatiebronnen, str):
            identificatiebronnen = [identificatiebronnen]

        if len(identificatiekenmerken) != len(identificatiebronnen):
            self.error("number of 'identificatieKenmerk' tags differs from "
                       "number of 'identificatieBron' tags")

        self.ids = [IdentificatieGegevens(k, b)
                    for k, b in zip(identificatiekenmerken, identificatiebronnen)]

        if naam:
            self.naam = naam
        else:
            self.naam = os.path.basename(infile.name)

        self.url = url
        self.omvang = os.path.getsize(infile.name)
        self.bestandsformaat = self.pronominfo(infile.name)
        self.checksum = ChecksumGegevens(infile)

        if isrepresentatievan:
            self.isrepresentatievan = isrepresentatievan
        elif informatieobject:
            informatieobject = self._process_file(informatieobject)
            self.isrepresentatievan = self.detect_verwijzing(informatieobject)
        else:
            self.error("Bestand() expects a parameter for either "
                       "'informatieobject' or 'isrepresentatievan'")

        informatieobject.close()
        infile.close()

    def to_xml(self, mdto_tag: bool = True) -> ET.ElementTree:
        """
        Transform Bestand into an XML tree with the following structure:

        ```xml
        <MDTO xmlns=…>
            <bestand>
                …
            </bestand>
        </MDTO>
        ```

        Args:
            mdto_tag (bool, optional): set this to False if <bestand> instead of <MDTO>
              should be the root tag. This is useful if your XML contains multiple trees.
              Defaults to True.

        Returns:
            ET.ElementTree: XML tree representing Bestand object. This object can be written to a file by
                calling `.write()`.
        """

        mdto = ET.Element(
            "MDTO",
            attrib={
                "xmlns": "https://www.nationaalarchief.nl/mdto",
                "xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance",
                "xsi:schemaLocation": "https://www.nationaalarchief.nl/mdto https://www.nationaalarchief.nl/mdto/MDTO-XML1.0.1.xsd",
            },
        )

        if mdto_tag:
            root = ET.SubElement(mdto, "bestand")
        else:
            root = ET.Element("bestand")

        for i in self.ids:
            root.append(i.to_xml("identificatie"))

        naam = ET.SubElement(root, "naam")
        naam.text = self.naam

        omvang = ET.SubElement(root, "omvang")
        # ET wants str types
        omvang.text = str(self.omvang)

        # bestandsformaat can be None if fido detection failed and force is True
        if self.bestandsformaat:
            root.append(self.bestandsformaat.to_xml("bestandsformaat"))
        else:
            ET.SubElement(root, "bestandsformaat")

        root.append(self.checksum.to_xml())

        if self.url:
            url = ET.SubElement(root, "URLBestand")
            url.text = self.url

        # can be None if XML parsing failed
        if self.isrepresentatievan:
            root.append(self.isrepresentatievan.to_xml("isRepresentatieVan"))
        else:
            ET.SubElement(root, "isRepresentatieVan")

        tree = ET.ElementTree(mdto) if mdto_tag else ET.ElementTree(root)
        ET.indent(tree, space="    ")  # use 4 spaces as indentation

        return tree

    def pronominfo(self, path: str) -> BegripGegevens:
        # FIXME: format more properly
        """Use fido library to generate PRONOM information about a file.
        This information can be used in the <bestandsformaat> tag.

        Args:
            path (str): path to the file to inspect

        Returns:
            ``BegripGegevens`` object with the following properties::
                {
                    `begripLabel`: file's PRONOM signature name
                    `begripCode`: file's PRONOM ID
                    `begripBegrippenLijst`: reference to PRONOM registry
                }
        """

        # Note: fido currently lacks a public API
        # Hence, the most robust solution is to invoke fido as a cli program
        # Upstream issue: https://github.com/openpreserve/fido/issues/94
        # downside is that this is slow, maybe siegfried speeds things up?

        # check if fido program exists
        if not shutil.which("fido"):
            self.error(
                "'fido' not found. For installation instructions, "
                "see https://github.com/openpreserve/fido#installation")

        cmd = [
            "fido",
            "-q",
            "-matchprintf",
            "OK,%(info.formatname)s,%(info.puid)s,\n",
            "-nomatchprintf",
            "FAIL",
            path,
        ]

        cmd_result = subprocess.run(
            cmd, capture_output=True, shell=False, text=True, check=True
        )
        stdout = cmd_result.stdout
        stderr = cmd_result.stderr
        returncode = cmd_result.returncode

        # fido prints warnings about empty files to stderr
        if "(empty)" in stderr.lower():
            self.warn(f"file {path} appears to be an empty file!")

        # check for errors
        if returncode != 0:
            self.warn(f"fido PRONOM detection on file {path} "
                      f"failed with error '{stderr}'.")
        elif stdout.startswith("OK"):
            results = stdout.split('\n')
            if len(results) > 2: # .split('\n') returns a list of two items
                self.log("Info: fido returned more than one PRONOM match "
                         f"for file {path}. Selecting the first one.")

            # strip "OK" from the output
            results = results[0].split(",")[1:]
            verwijzing = VerwijzingGegevens(verwijzingNaam="PRONOM-register")
            return BegripGegevens(
                begripLabel=results[0],
                begripCode=results[1],
                begripBegrippenlijst=verwijzing,
            )
        else:
            self.warn(f"fido failed to detect PRONOM ID of file {path}.")

        # can return None in case PRONOM detection fails and force == True
        return None

    def detect_verwijzing(self, informatieobject_xml: TextIO) -> VerwijzingGegevens:
        """
        A MDTO Bestand object must contain a reference to a corresponding informatieobject.
        Specifically, it expects an <isRepresentatieVan> tag with the following children:

        1. <verwijzingNaam>: name of the informatieobject
        2. <verwijzingIdentificatie> (optional): reference to the 
        informatieobject's ID and source thereof
        
        This function infers these so-called 'VerwijzingGegevens' by
        parsing the XML of the file `informatieobject_xml`.
        
        MDTO Docs:
            https://www.nationaalarchief.nl/archiveren/mdto/isRepresentatieVan

        Args:
            informatieobject_xml (TextIO): XML file to infer VerwijzingGegevens from

        Returns:
            `VerwijzingGegevens`, refering to the informatieobject
        """
        
        id_gegevens = None
        namespaces = {'mdto': 'https://www.nationaalarchief.nl/mdto'}
        tree = ET.parse(informatieobject_xml)
        root = tree.getroot()

        id_xpath = ".//mdto:informatieobject/mdto:identificatie/"

        kenmerk = root.find(
            id_xpath + 'mdto:identificatieKenmerk', namespaces=namespaces)
        bron = root.find(
            id_xpath + 'mdto:identificatieBron', namespaces=namespaces)
        naam = root.find(".//mdto:informatieobject/mdto:naam", 
                         namespaces=namespaces)

        # bool(ET.Element) == False, according to the docs
        # So use ¬p and ¬q == ¬(p or q)
        if not (kenmerk is None or bron is None):
            id_gegevens = IdentificatieGegevens(kenmerk.text, bron.text)

        if naam is None:
            self.warn(f"informatieobject in {informatieobject_xml.name} "
                      "lacks a <naam> tag.")
            return None
        else:
            return VerwijzingGegevens(naam.text, id_gegevens)



    @property
    def naam(self):
        """Value of MDTO 'naam' tag.

        Defaults to: the name of the input file.
        Valid value: any string of up to 80 characters in length
        MDTO docs: https://www.nationaalarchief.nl/archiveren/mdto/naam
        """
        return self._naam

    @naam.setter
    def naam(self, val):
        if len(val) > MAX_NAAM_LENGTH:
            self.warn(f"value '{val}' of attribute 'naam' "
                      "exceeds maximum length of {MAX_NAAM_LENGTH}")
        self._naam = val

    @property
    def url(self):
        """Value of MDTO 'URLBestand' tag.

        Valid value: any RFC 3986 compliant URI
        MDTO docs: https://www.nationaalarchief.nl/archiveren/mdto/URLBestand
        """
        return self._url

    @url.setter
    def url(self, val):
        # url can be non-existant
        if val is None:
            self._url = None
        elif validators.url(val):
            self._url = val
        else:
            self.warn(f"URL {val} is malformed.")

    # Helper methods
    def _process_file(self, file_or_filename) -> TextIO:
        """
        Return file-object in case input is already a file.
        Otherwise, assume the argument is a path, and return
        a new file object.
        """

        if isinstance(file_or_filename, str):
            return open(file_or_filename, "r")
        elif hasattr(file_or_filename, "read"):
            # file needs to be in read-only mode
            if file_or_filename.writable():
                filename = file_or_filename.name
                file_or_filename.close()
                return open(filename, "r")
            else:
                return file_or_filename
        else:
            raise TypeError("provided invalid file to Bestand()")

    def warn(self, warning):
        """Print warning, and exit if self.force is not set"""

        orange = '\033[33m'
        esc_end = '\033[0m'

        warning = f"{orange}Warning: {warning} "
        warning += "Continuing anyway." if self.force else "Exiting."
        warning += esc_end

        self.log(warning)
        if not self.force:
            sys.exit(-1)

    def error(self, error):
        """Print error and exit"""

        red = '\033[31m'
        esc_end = '\033[0m'

        self.log(f"{red}Error: {error}{esc_end}")
        sys.exit(-1)

if __name__ == "__main__":

    import argparse

    bb = '\033[1m'
    be = '\033[0m'
    parser = argparse.ArgumentParser(
        description="Create a 'MDTO Bestand' .xml file based on the characteristics of your input FILE.\n"
        "The value of most XML tags will be inferred automatically, but some need to be specified manually.\n\n"
        f'{bb}Example:{be} mdto img001.jpg --identificatiekenmerk 34c5-43a --identificatiebron "Corsa (DMS)" --informatieobject 103.xml',
        formatter_class=argparse.RawTextHelpFormatter,
        epilog="For more information, see https://www.nationaalarchief.nl/archiveren/mdto/bestand",
    )

    parser.add_argument(
        "infile",
        metavar="FILE",
        type=argparse.FileType("r"),
        help="file for which a MDTO Bestand .xml file should be generated",
    )
    parser.add_argument(
        "--identificatiekenmerk",
        "-k",
        metavar="KENMERK",
        required=True,
        action="append",
        help="value of <identificatieKenmerk>. Can be specified multiple times",
    )
    parser.add_argument(
        "--identificatiebron",
        "-b",
        metavar="BRON",
        required=True,
        action="append",
        help="value of <identificatieBron>. Can be specified multiple times",
    )
    parser.add_argument(
        "--informatieobject",
        "-O",
        metavar="INFORMATIEOBJECT.xml",
        required=True,
        type=argparse.FileType("r"),
        help="path to corresponding informatieobject. "
        "Used to infer values of <isRepresentatieVan>",
    )

    # optionals
    # nargs='?' means 'use value of default when nothing given'
    parser.add_argument(
        "--output",
        "-o",
        metavar="OUTPUT.xml",
        nargs="?",
        type=argparse.FileType("w"),
        default=sys.stdout,
        help="file to write to (default: print to stdout)",
    )
    parser.add_argument(
        "--url",
        "-u",
        help="value of <URLBestand>. Needs to be a RFC 3986 compliant URI",
    )
    parser.add_argument("--naam", "-n", help="override <naam> with custom value")
    parser.add_argument(
        "--quiet", "-q", action="store_true", help="silence non-fatal warnings"
    )
    parser.add_argument(
        "--force",
        "-f",
        action="store_true",
        help="do not exit when a tag's value conflicts with the MDTO spec. "
        "Might produce non-compliant files",
    )

    args = parser.parse_args()

    bestand = Bestand(
        infile=args.infile,
        identificatiekenmerken=args.identificatiekenmerk,
        identificatiebronnen=args.identificatiebron,
        informatieobject=args.informatieobject,
        naam=args.naam,
        url=args.url,
        quiet=args.quiet,
        force=args.force,
    )

    xml = bestand.to_xml()
    # encoding='unicode' is needed because ElementTree.write writes bytes by default
    # And writing to bytes to stdout won't work, apperently
    # www.stackoverflow.com/questions/47554882/elementtree-write-function-does-not-write-to-standard-out
    xml.write(
        args.output,
        encoding="unicode",
        xml_declaration=True,
        short_empty_elements=False,
    )
